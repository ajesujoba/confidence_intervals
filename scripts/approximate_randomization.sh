#!/usr/bin/env bash
#!/bin/bash

# Changelog:
# 17/01/2017 Álvaro Peris:
# - Added Meteor metric
# 18/11/2011 German Sanchis-Trilles:
# - output range with its appropriate precision (average and interval unchanged for informative reasons)
# 18/11/2011 Joan Albert Silvestre:
# - Fixed bug concerning TER pairwise range
# - Fixed bug that caused the script to fail when -n < 1000
# - Added Brevity Penalty confidence interval
# - Added -Xmx flag to java -jar for memory efficiency
# 30/10/2009 German Sanchis-Trilles:
# - First version


help="\t\t21/06/2018 Á. Peris - Based on the script by J.A. Silvestre and G. Sanchis-Trilles                    \n
\n
Usage:\t $0 <-r reference>  <-t output-system-A> <-b output-system-B> <-n nreps> \n\n
\t This script will take up a reference file and a hypothesis file and compute TER and BLEU statistical significance by means of approximate randomized tests. \n
\t Note: This script needs a *modified* version of TERCOM and  multi-bleu.perl. These two modified versions  \n
\t are included into this script for simplicity purposes and unpacked on the fly.          \n

Output:  - p-value of the null-hypothesis: Both outputs are generated by the same system."

perl=$(which perl)
java=$(which java)
if [ "$(which gawk)" != "" ]; then AWK=$(which gawk); else AWK=$(which awk); fi
interval=95

me=${BASH_SOURCE[0]}
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null && pwd )"

nmoptions=$(cat ${me} | ${AWK} '/^exit$/{exit}{print $0}' | grep "++moptions" | wc -l | gawk '{ print $1-1 }')
moptions=0;
cmd=("$@")
for ((i=0;i<${#cmd[@]};i++)); do
    case ${cmd[$i]} in
	"-r") 		    ref=${cmd[$((++i))]};((++moptions));;
	"-b")		    bas=${cmd[$((++i))]};;
	"-t")		    trans=${cmd[$((++i))]};((++moptions));;
	"-n")		    nreps=${cmd[$((++i))]};((++moptions));;
	"-i")		    interval=${cmd[$((++i))]};;
	"-y")           deletetemp="false";;
    "-v")           set -x;;
    *)              echo -e ${help} | tr '_' ' '; exit;;
    esac
done

if [ ${moptions} -lt ${nmoptions} ]; then echo -e ${help} | tr '_' ' '; exit; fi

if [ "$(which tmpdir)" == "" ]; then
	if [ -d $HOME/tmp ]; then TMPPREF="$HOME/tmp";
	else TMPPREF="/tmp"; fi
else TMPPREF=$(tmpdir); fi
tmpdir=`mktemp -d ${TMPPREF}/conftmp.XXXXXXXXXXX`
if [ "${deletetemp}" == "" ]; then
    trap "rm -rf ${tmpdir}" EXIT;
else
    echo "Temporary directory created in $tmpdir"; echo "NOT deleting it!!";
    trap "echo 'Remember to delete temp!! Use:'; echo 'rm -rf '${tmpdir}" EXIT;
fi

echo "Reading reference translations from $ref..."
echo "Reading hypotheses from $trans..."

N=$(wc -l ${ref} | ${AWK} '{ print $1 }')

mbleu=./sbs_mbleu.perl
tercom=./sbs_tercom.jar
meteorcom=./meteor-*.jar

# Compute bleus of hypo1
${perl} ${mbleu} ${ref} < ${trans} 2>&1 | grep -v "^BLEU" > ${tmpdir}/bleucounts

# Compute ters of hypo1
cat ${ref} | ${AWK} '{ print $0,"(TER-"NR")" }' > ${tmpdir}/ter_ref
cat ${trans} | ${AWK} '{ print $0,"(TER-"NR")" }' > ${tmpdir}/ter_hyp
${java} -Xmx512m -jar ${tercom} -r ${tmpdir}/ter_ref -h ${tmpdir}/ter_hyp  > ${tmpdir}/ter_res
cat ${tmpdir}/ter_res | grep "Sentence TER: "| cut -d ' ' -f 3,4 > ${tmpdir}/tercounts


echo -e "Reading baseline translations from $bas..."
# Compute bleus of hypo2
${perl} ${mbleu} ${ref} < ${bas} 2>&1 | grep -v "^BLEU" > ${tmpdir}/bleucounts_bas
# Compute ters of hypo2
cat ${bas} | ${AWK} '{ print $0,"(TER-"NR")" }' > ${tmpdir}/ter_bas
${java} -Xmx512m -jar ${tercom} -r ${tmpdir}/ter_ref -h ${tmpdir}/ter_bas > ${tmpdir}/ter_res_bas
cat ${tmpdir}/ter_res_bas | grep "Sentence TER: "| cut -d ' ' -f 3,4 > ${tmpdir}/tercounts_bas

cat ${tmpdir}/tercounts | ${AWK} '{print $1/$2}' >  ${tmpdir}/ters
cat ${tmpdir}/tercounts_bas | ${AWK} '{print $1/$2}' >  ${tmpdir}/ters_bas

cat ${tmpdir}/bleucounts | ${AWK} '{
         split($0, bp);
		 for (j=1;j<=9;++j)
		    bleucountacc[j]+=bp[j]
        if (bleucountacc[9] > bleucountacc[5])
		    brevpen=exp(1-bleucountacc[9]/bleucountacc[5])
        else
            brevpen=1
        bleus=exp((log(bleucountacc[1]/bleucountacc[5]) + log(bleucountacc[2]/bleucountacc[6]) + log(bleucountacc[3]/bleucountacc[7]) + log(bleucountacc[4]/bleucountacc[8]))/4)*brevpen;
        print bleus }' > ${tmpdir}/bleus

cat ${tmpdir}/bleucounts_bas | ${AWK} '{
         split($0, bp);
		 for (j=1;j<=9;++j)
		    bleucountacc[j]+=bp[j]
        if (bleucountacc[9] > bleucountacc[5])
		    brevpen=exp(1-bleucountacc[9]/bleucountacc[5])
        else
            brevpen=1
        bleus=exp((log(bleucountacc[1]/bleucountacc[5]) + log(bleucountacc[2]/bleucountacc[6]) + log(bleucountacc[3]/bleucountacc[7]) + log(bleucountacc[4]/bleucountacc[8]))/4)*brevpen;
        print bleus }' > ${tmpdir}/bleus_bas


echo "Computing significance level of BLEU"
python ${DIR}/../python//approximate_randomization_test.py ${tmpdir}/bleus_bas ${tmpdir}/bleus ${nreps}

echo "Computing significance level of TER"
python ${DIR}/../python/approximate_randomization_test.py ${tmpdir}/ters_bas ${tmpdir}/ters ${nreps}

exit
